plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.spongepowered.mixin' version '0.7.+'
}

version = project.mod_version
group = project.mod_group_id

base {
    archivesName = project.archives_base_name
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
	mappings channel: project.mapping_channel, version: project.mapping_version
	copyIdeResources = true

	runs {
		configureEach {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			property 'forge.enabledGameTestNamespaces', mod_id

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		client {
			property 'forge.enabledGameTestNamespaces', mod_id
		}

		data {
			workingDirectory project.file('run-data')
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

mixin {
	// MixinGradle Settings
	add sourceSets.main, 'qdaa-refmap.json'
	config 'qdaa.mixins.json'
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {
	// Specify the version of Minecraft to use.
	// Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
	// The "userdev" classifier will be requested and setup by ForgeGradle.
	// If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
	// then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	// Apply Mixin AP
	annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
			forge_version: forge_version, forge_version_range: forge_version_range,
			loader_version_range: loader_version_range,
			mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
			mod_authors: mod_authors, mod_description: mod_description,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				'Specification-Title'     : mod_id,
				'Specification-Vendor'    : mod_authors,
				'Specification-Version'   : '1', // We are version 1 of ourselves
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : mod_authors,
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	// This is the preferred method to reobfuscate your jar file
	finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
}